@inject IHttpContextAccessor ContextAccessor;

@using URLShortener.WebApi.Data
@using URLShortener.WebApi.Enums

@model URLShortener.WebApi.Models.About

@{
    ViewData["Title"] = "About us";
    ViewData["Message"] = ContextAccessor.HttpContext.Session.GetString("AboutMessage") ?? "An URL shortening algorithm in ASP.NET MVC Core typically involves generating a shorter unique identifier for a given URL and storing it in a database. When a user accesses the shortened URL, the application retrieves the original URL from the database and redirects the user to the original URL.";

    var userRole = ContextAccessor.HttpContext.Session.GetString("Role");
    /*
    <form asp-action="Edit">
        <div class="form-group">
            <input type="submit" value="Edit" class="btn btn-primary"/>
        </div>
    </form>
    */
}
<h1>@ViewData["Title"]</h1>

<p>@ViewData["Message"]</p>

<div class="row">
    <div class="col-md-4">
        @if (userRole == UserRoles.Admin.ToString())
        {
            <form asp-action="Edit">
                <div class="form-group">
                    <input type="submit" value="Edit" class="btn btn-primary"/>
                </div>
            </form>
        }
    </div>
</div>

<script>
  const editor = document.querySelector("#editor");
  const editBtn = document.querySelector("#edit");
  const saveBtn = document.querySelector("#save");
  const output = document.querySelector("#output");

  editBtn.addEventListener("click", function() {
    editor.style.display = "block";
    output.style.display = "none";
    editBtn.style.display = "none";
    saveBtn.style.display = "block";
  });

  saveBtn.addEventListener("click", function() {
    editor.style.display = "none";
    output.style.display = "block";
    output.innerHTML = editor.value;
    editBtn.style.display = "block";
    saveBtn.style.display = "none";
  });
</script>